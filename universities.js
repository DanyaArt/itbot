(function(){
	console.log('üöÄ Universities.js –∑–∞–≥—Ä—É–∂–µ–Ω');
	
	const grid = document.getElementById('uniGrid');
	const searchInput = document.getElementById('searchInput');
	const specFilter = document.getElementById('specFilter');

	console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', { grid, searchInput, specFilter });

	let universities = [];
	let specializations = [];

	function render(list){
		console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞:', list?.length || 0);
		
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—É–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ—Ä–æ–¥—É
		const groupedUnis = {};
		list.forEach(u => {
			const key = `${u.name}|${u.city}`;
			if (!groupedUnis[key]) {
				groupedUnis[key] = {
					name: u.name,
					city: u.city,
					url: '',
					specializations: []
				};
			}
			// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
			const specExists = groupedUnis[key].specializations.some(s => s.name === u.specialization);
			if (!specExists && u.specialization) {
				groupedUnis[key].specializations.push({
					name: u.specialization,
					score_min: u.score_min,
					score_max: u.score_max
				});
			}
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –æ—Ç –ø–µ—Ä–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –µ–≥–æ –∏–º–µ–µ—Ç
			if (u.url && !groupedUnis[key].url) {
				groupedUnis[key].url = u.url;
			}
		});
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		const uniqueUnis = Object.keys(groupedUnis).length;
		const uniqueSpecs = new Set();
		list.forEach(u => { if(u.specialization) uniqueSpecs.add(u.specialization); });
		
		const uniqueCount = document.getElementById('uniqueUniCount');
		const totalCount = document.getElementById('totalSpecsCount');
		
		if (uniqueCount) {
			const uniText = getRussianPlural(uniqueUnis, '–≤—É–∑', '–≤—É–∑–∞', '–≤—É–∑–æ–≤');
			uniqueCount.textContent = `${uniqueUnis} ${uniText}`;
		}
		if (totalCount) {
			const specCount = uniqueSpecs.size;
			const specText = getRussianPlural(specCount, '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π');
			totalCount.textContent = `${specCount} ${specText}`;
		}
		
		if(!grid) {
			console.error('‚ùå Grid —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
			return;
		}
		if(!list || list.length === 0){
			grid.innerHTML = '<div class="uni-empty">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
			return;
		}
		
		grid.innerHTML = Object.values(groupedUnis).map(uni => {
			// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
			const sortedSpecs = [...uni.specializations].sort((a, b) => a.name.localeCompare(b.name));
			
			const specializationsHtml = sortedSpecs.map(spec => {
				const score = (spec.score_min != null && spec.score_max != null)
					? `${spec.score_min}-${spec.score_max}`
					: '‚Äî';
				return `
					<div class="spec-item">
						<span class="spec-name">${escapeHtml(spec.name)}</span>
						<span class="spec-score">${score}</span>
					</div>
				`;
			}).join('');
			
			const link = uni.url ? `<a class="btn btn-primary" href="${uni.url}" target="_blank" rel="noopener">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>` : '';
			
			return `
				<div class="uni-card">
					<div class="uni-card-head">
						<h3 class="uni-title">${escapeHtml(uni.name)}</h3>
					</div>
					<div class="uni-location">
						<i class="fas fa-location-dot"></i>
						<span>${escapeHtml(uni.city || '‚Äî')}</span>
					</div>
					<div class="uni-specializations">
						<h4>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (${sortedSpecs.length}):</h4>
						<div class="spec-list">
							${specializationsHtml}
						</div>
					</div>
					<div class="uni-actions">
						${link}
					</div>
				</div>
			`;
		}).join('');
		console.log('‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
	}

	function escapeHtml(str){
		return String(str)
			.replace(/&/g, '&amp;')
			.replace(/</g, '&lt;')
			.replace(/>/g, '&gt;')
			.replace(/"/g, '&quot;')
			.replace(/'/g, '&#039;');
	}
	
	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
	function getRussianPlural(count, one, two, five) {
		const mod10 = count % 10;
		const mod100 = count % 100;
		
		if (mod100 >= 11 && mod100 <= 19) return five;
		if (mod10 === 1) return one;
		if (mod10 >= 2 && mod10 <= 4) return two;
		return five;
	}

	function applyFilters(){
		const q = (searchInput.value || '').toLowerCase().trim();
		const spec = specFilter.value;
		
		let filtered = universities;
		
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
		if (q) {
			filtered = filtered.filter(u => 
				(u.name && u.name.toLowerCase().includes(q)) || 
				(u.city && u.city.toLowerCase().includes(q))
			);
		}
		
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if (spec) {
			filtered = filtered.filter(u => u.specialization === spec);
		}
		
		render(filtered);
	}

	function populateSpecs(){
		// –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
		while (specFilter.children.length > 1) {
			specFilter.removeChild(specFilter.lastChild);
		}
		
		const set = new Set();
		universities.forEach(u => { if(u.specialization){ set.add(u.specialization); } });
		specializations = Array.from(set).sort();
		specializations.forEach(s => {
			const opt = document.createElement('option');
			opt.value = s;
			opt.textContent = s;
			specFilter.appendChild(opt);
		});
	}

	function initEvents(){
		searchInput.addEventListener('input', applyFilters);
		specFilter.addEventListener('change', applyFilters);
		
		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		const refreshBtn = document.getElementById('refreshBtn');
		if (refreshBtn) {
			refreshBtn.addEventListener('click', () => {
				console.log('üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
				refreshBtn.classList.add('loading');
				loadData().finally(() => {
					refreshBtn.classList.remove('loading');
				});
			});
		}
	}

	// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
	function loadData() {
		console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
		console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', window.EMBEDDED_UNIVERSITIES);
		
		return new Promise((resolve, reject) => {
			// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			if (window.EMBEDDED_UNIVERSITIES && window.EMBEDDED_UNIVERSITIES.length > 0) {
				console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—É–∑–æ–≤:', window.EMBEDDED_UNIVERSITIES.length);
				universities = window.EMBEDDED_UNIVERSITIES;
				populateSpecs();
				initEvents();
				render(universities);
				resolve();
				return;
			}
			
			console.log('üì° –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞—é universities.json...');
			
			// –ï—Å–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ fetch
			fetch('universities.json', { 
				cache: 'no-store',
				method: 'GET',
				headers: {
					'Cache-Control': 'no-cache',
					'Pragma': 'no-cache'
				}
			})
			.then(r => {
				console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', r.status, r.statusText);
				if (!r.ok) throw new Error(`HTTP ${r.status}: ${r.statusText}`);
				return r.text();
			})
			.then(text => {
				console.log('üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', text.length);
				try {
					const data = JSON.parse(text);
					console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, –≤—É–∑–æ–≤:', data.length);
					universities = Array.isArray(data) ? data : [];
					populateSpecs();
					initEvents();
					render(universities);
					resolve();
				} catch (parseError) {
					console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
					reject(parseError);
				}
			})
			.catch(err => {
				console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ universities.json:', err);
				console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.message);
				console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...');
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
				universities = getDemoData();
				populateSpecs();
				initEvents();
				render(universities);
				resolve(); // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–∞–∂–µ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
			});
		});
	}

	// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
	function getDemoData() {
		return [
			{
				"name": "–ë–µ–ª–ì–£",
				"location": "–ë–µ–ª–≥–æ—Ä–æ–¥",
				"score_min": 220,
				"score_max": 250,
				"url": "https://bsu.edu.ru",
				"specialization": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
			},
			{
				"name": "–í–ì–£",
				"location": "–í–æ—Ä–æ–Ω–µ–∂",
				"score_min": 225,
				"score_max": 255,
				"url": "https://www.vsu.ru",
				"specialization": "Data Science"
			},
			{
				"name": "–ú–ì–£",
				"location": "–ú–æ—Å–∫–≤–∞",
				"score_min": 280,
				"score_max": 300,
				"url": "https://www.msu.ru",
				"specialization": "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
			}
		];
	}

	// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', loadData);
	} else {
		loadData();
	}
	
	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	setInterval(() => {
		console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
		loadData();
	}, 30000);
})(); 