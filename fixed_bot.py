#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è IT-–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å 30 –≤–æ–ø—Ä–æ—Å–∞–º–∏
"""

import telebot
import json
import logging
from telebot import types
from config import Config
from database.queries import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(Config.BOT_TOKEN)
db = Database(Config.DB_URL)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_states = {}

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in Config.ADMIN_IDS

@bot.message_handler(commands=['start'])
def start(message):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        questions_dict = db.get_all_questions()
        total_questions = len(questions_dict)
    except:
        total_questions = 30  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    
    welcome_text = f"""
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ç–æ—Ä!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é IT-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.

üìã –¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'))
    markup.add(types.KeyboardButton('–ü–æ–º–æ—â—å'))
    
    bot.reply_to(message, welcome_text, reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        questions_dict = db.get_all_questions()
        total_questions = len(questions_dict)
    except:
        total_questions = 30  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    
    help_text = f"""
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:
‚Ä¢ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç ({total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /restart - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üí° –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
    """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['admin'])
def admin_command(message):
	admin_panel(message)

def admin_panel(message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_admin_statistics()
    
    admin_text = f"""
üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {stats['completed_tests']}
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}
‚Ä¢ –í—Å–µ–≥–æ –≤—É–∑–æ–≤: {stats['total_universities']}
‚Ä¢ –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {stats['total_specializations']}

üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –í—É–∑—ã - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏'),
        types.KeyboardButton('üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—É–∑–∞–º–∏')
    )
    markup.add(
        types.KeyboardButton('üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏'),
        types.KeyboardButton('üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
    )
    markup.add(
        types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    )
    markup.add(
        types.KeyboardButton('‚¨ÖÔ∏è –í—ã—Ö–æ–¥')
    )
    
    admin_states[message.from_user.id] = {'state': 'admin_main'}
    bot.reply_to(message, admin_text, reply_markup=markup)

def get_admin_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_questions = len(db.get_all_questions())
        total_specializations = len(db.get_all_specializations())
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
        try:
            import json
            import os
            
            universities_file = 'universities.json'
            if os.path.exists(universities_file):
                with open(universities_file, 'r', encoding='utf-8') as f:
                    universities = json.load(f)
                total_universities = len(universities)
            else:
                total_universities = 0
        except:
            total_universities = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            user_stats = db.get_user_statistics()
            total_users = user_stats.get('total_users', 0)
            active_sessions = user_stats.get('active_sessions', 0)
            completed_tests = user_stats.get('completed_tests', 0)
        except:
            total_users = 0
            active_sessions = 0
            completed_tests = 0
        
        return {
            'total_users': total_users,
            'active_sessions': active_sessions,
            'completed_tests': completed_tests,
            'total_questions': total_questions,
            'total_universities': total_universities,
            'total_specializations': total_specializations
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_users': 0,
            'active_sessions': 0,
            'completed_tests': 0,
            'total_questions': 0,
            'total_universities': 0,
            'total_specializations': 0
        }

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç')
def begin_test_button(message):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        user_id = message.from_user.id
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = db.create_user_session(user_id)
        user_states[user_id] = {
            'session_id': session_id,
            'current_question': 1,
            'answers': {}
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        send_question(message.chat.id, user_id, 1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ begin_test_button: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == '–ü–æ–º–æ—â—å')
def help_button(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_command(message)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º')
def back_to_results(message):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞"""
    try:
        user_id = message.from_user.id
        
        if user_id not in user_states:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
            return
        
        current_state = user_states[user_id]
        
        if not current_state.get('show_all_universities'):
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–Ω–æ–≤–∞
        show_results(message)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back_to_results: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")

@bot.message_handler(func=lambda message: message.text == '–í—Å–µ –≤—É–∑—ã')
def show_all_universities_user(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        
        if user_id not in user_states:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
            return
        
        current_state = user_states[user_id]
        
        if not current_state.get('show_all_universities'):
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞.")
            return
        
        specialization_id = current_state.get('specialization_id')
        specialization_name = current_state.get('specialization_name')
        
        if not specialization_id:
            bot.reply_to(message, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        universities = db.get_universities_by_specialization(specialization_id)
        
        if not universities:
            bot.reply_to(message, "‚ùå –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ –±–∞–ª–ª–∞–º
        universities_sorted = sorted(universities, key=lambda x: x.get('score_max', 0), reverse=True)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cities = {}
        for uni in universities_sorted:
            city = uni.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
            if city not in cities:
                cities[city] = []
            cities[city].append(uni)
        
        result_text = f"""
üèõÔ∏è –í—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "{specialization_name}":

"""
        
        for city, unis in cities.items():
            result_text += f"\nüìç {city}:\n"
            for uni in unis:
                score_range = f"{uni.get('score_min', 0)}-{uni.get('score_max', 0)}"
                result_text += f"   ‚Ä¢ {uni['name']}\n"
                result_text += f"     üéØ –ë–∞–ª–ª—ã –ï–ì–≠: {score_range}\n"
        
        result_text += f"\nüìä –í—Å–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤: {len(universities_sorted)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º'))
        markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'))
        markup.add(types.KeyboardButton('–ü–æ–º–æ—â—å'))
        
        bot.send_message(message.chat.id, result_text, reply_markup=markup, disable_web_page_preview=True)
        
        # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_all_universities: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤.")

def send_question(chat_id, user_id, question_number):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î
        all_questions = db.get_all_questions()
        question_ids = sorted(all_questions.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö
        if question_number > len(question_ids):
            bot.send_message(chat_id, f"‚ùå –í–æ–ø—Ä–æ—Å {question_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É
        question_id = question_ids[question_number - 1]
        question = all_questions[question_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for option in question['options']:
            markup.add(types.KeyboardButton(option['text']))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        total_questions = len(question_ids)
        bot.send_message(chat_id, f"‚ùì –í–æ–ø—Ä–æ—Å {question_number}/{total_questions}:\n\n{question['text']}", reply_markup=markup)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_question: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)
# ============================================================================

@bot.message_handler(func=lambda message: message.text == '‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏')
def questions_management(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã'),
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
    )
    markup.add(
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å'),
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    
    bot.reply_to(message, "‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã')
def show_all_questions(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        questions_dict = db.get_all_questions()
        if not questions_dict:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = sorted(list(questions_dict.keys()))
        total_questions = len(question_ids)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        admin_states[user_id] = {
            'state': 'viewing_questions',
            'questions_dict': questions_dict,
            'question_ids': question_ids,
            'current_page': 0,
            'questions_per_page': 10
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        show_questions_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_questions_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    state = admin_states.get(user_id, {})
    questions_dict = state.get('questions_dict', {})
    question_ids = state.get('question_ids', [])
    current_page = state.get('current_page', 0)
    questions_per_page = state.get('questions_per_page', 5)
    
    total_questions = len(question_ids)
    total_pages = (total_questions + questions_per_page - 1) // questions_per_page
    
    if total_questions == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * questions_per_page
    end_idx = min(start_idx + questions_per_page, total_questions)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = f"üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n\n"
    
    for i in range(start_idx, end_idx):
        question_id = question_ids[i]
        question = questions_dict[question_id]
        if question:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            question_text = question['text']
            if len(question_text) > 60:
                question_text = question_text[:60] + "..."
            
            text += f"üÜî ID: {question_id}\n"
            text += f"üìù {question_text}\n"
            text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"üìä –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(question.get('options', []))}\n"
            text += "‚îÄ" * 40 + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    if current_page < total_pages - 1:
        nav_buttons.append(types.KeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è'))
    
    if nav_buttons:
        markup.add(*nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    info_buttons = []
    if total_pages > 1:
        info_buttons.append(types.KeyboardButton(f'üìÑ {current_page + 1}/{total_pages}'))
    info_buttons.append(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å'))
    
    if info_buttons:
        markup.add(*info_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é'))
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'viewing_questions')
def handle_questions_navigation(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    current_page = state.get('current_page', 0)
    total_pages = (len(state.get('question_ids', [])) + state.get('questions_per_page', 5) - 1) // state.get('questions_per_page', 5)
    
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if current_page > 0:
            state['current_page'] = current_page - 1
            admin_states[user_id] = state
            show_questions_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è':
        if current_page < total_pages - 1:
            state['current_page'] = current_page + 1
            admin_states[user_id] = state
            show_questions_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        try:
            questions_dict = db.get_all_questions()
            question_ids = sorted(list(questions_dict.keys()))
            state['questions_dict'] = questions_dict
            state['question_ids'] = question_ids
            admin_states[user_id] = state
            show_questions_page(message, user_id)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    elif message.text == '‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é':
        del admin_states[user_id]
        questions_management(message)
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ID –≤–æ–ø—Ä–æ—Å–∞
        try:
            question_id = int(message.text)
            if question_id in state.get('questions_dict', {}):
                show_question_details(message, user_id, question_id)
            else:
                bot.reply_to(message, "‚ùå –í–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def show_question_details(message, user_id, question_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ"""
    state = admin_states.get(user_id, {})
    questions_dict = state.get('questions_dict', {})
    
    question = questions_dict.get(question_id)
    if not question:
        bot.reply_to(message, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    text = f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ\n\n"
    text += f"üÜî ID: {question_id}\n"
    text += f"üìù –¢–µ–∫—Å—Ç: {question['text']}\n"
    text += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(question.get('options', []))}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    text += "üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
    for i, option in enumerate(question.get('options', []), 1):
        if isinstance(option, dict):
            text += f"{i}. {option.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}\n"
            text += f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {option.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"   üìä –ë–∞–ª–ª: {option.get('value', 0)}\n"
        else:
            text += f"{i}. {option}\n"
        text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å')
    )
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'))
    
    bot.reply_to(message, text, reply_markup=markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    state['current_question_id'] = question_id
    admin_states[user_id] = state

@bot.message_handler(func=lambda message: message.text in ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'])
def handle_question_actions(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ–ø—Ä–æ—Å–æ–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    question_id = state.get('current_question_id')
    
    if message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        bot.reply_to(message, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å':
        if question_id:
            try:
                success = db.delete_question(question_id)
                if success:
                    bot.reply_to(message, f"‚úÖ –í–æ–ø—Ä–æ—Å ID {question_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                    questions_dict = db.get_all_questions()
                    question_ids = sorted(list(questions_dict.keys()))
                    state['questions_dict'] = questions_dict
                    state['question_ids'] = question_ids
                    admin_states[user_id] = state
                    show_questions_page(message, user_id)
                else:
                    bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ ID {question_id}")
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        else:
            bot.reply_to(message, "‚ùå ID –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    elif message.text == '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É':
        show_questions_page(message, user_id)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
def add_question_start(message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_states[user_id] = {'state': 'adding_question', 'step': 0}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, 
                 "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞\n\n"
                 "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'adding_question')
def add_question_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        admin_panel(message)
        return
    
    state = admin_states[user_id]
    step = state.get('step', 0)
    
    if step == 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        state['question_text'] = message.text
        state['step'] = 1
        state['options'] = []
        state['option_count'] = 0
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton('2 –≤–∞—Ä–∏–∞–Ω—Ç–∞'),
            types.KeyboardButton('3 –≤–∞—Ä–∏–∞–Ω—Ç–∞'),
            types.KeyboardButton('4 –≤–∞—Ä–∏–∞–Ω—Ç–∞')
        )
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –í–æ–ø—Ä–æ—Å: {message.text}\n\n"
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:",
                     reply_markup=markup)
                     
    elif step == 1:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π
        if message.text == '2 –≤–∞—Ä–∏–∞–Ω—Ç–∞':
            state['total_options'] = 2
        elif message.text == '3 –≤–∞—Ä–∏–∞–Ω—Ç–∞':
            state['total_options'] = 3
        elif message.text == '4 –≤–∞—Ä–∏–∞–Ω—Ç–∞':
            state['total_options'] = 4
        else:
            bot.reply_to(message, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–æ–∫")
            return
        
        state['step'] = 2
        state['option_count'] = 0
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'),
            types.KeyboardButton('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'),
            types.KeyboardButton('–î–∏–∑–∞–π–Ω'),
            types.KeyboardButton('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')
        )
        markup.add(
            types.KeyboardButton('DevOps'),
            types.KeyboardButton('–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'),
            types.KeyboardButton('Game Development'),
            types.KeyboardButton('AI/ML')
        )
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –í–æ–ø—Ä–æ—Å: {state['question_text']}\n"
                     f"üìä –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {state['total_options']}\n\n"
                     f"–í–∞—Ä–∏–∞–Ω—Ç {state['option_count'] + 1} –∏–∑ {state['total_options']}\n"
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:",
                     reply_markup=markup)
                     
    elif step == 2:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø—Ü–∏–∏
        category_map = {
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': 'code',
            '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö': 'data', 
            '–î–∏–∑–∞–π–Ω': 'design',
            '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'security',
            'DevOps': 'devops',
            '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 'mobile',
            'Game Development': 'game',
            'AI/ML': 'ai_ml'
        }
        
        if message.text not in category_map:
            bot.reply_to(message, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–Ω–æ–ø–æ–∫")
            return
        
        category = category_map[message.text]
        value_map = {
            'code': 4, 'data': 8, 'design': 12, 'security': 16,
            'devops': 20, 'mobile': 24, 'game': 28, 'ai_ml': 32
        }
        value = value_map[category]
        
        state['current_category'] = category
        state['current_value'] = value
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –í–æ–ø—Ä–æ—Å: {state['question_text']}\n"
                     f"üìä –í–∞—Ä–∏–∞–Ω—Ç {state['option_count'] + 1} –∏–∑ {state['total_options']}\n"
                     f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n\n"
                     f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞:",
                     reply_markup=markup)
        
        state['step'] = 3
        
    elif step == 3:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏
        option_text = message.text.strip()
        
        if not option_text:
            bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é
        option = {
            'text': option_text,
            'category': state['current_category'],
            'value': state['current_value']
        }
        state['options'].append(option)
        state['option_count'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–ø—Ü–∏–∏
        if state['option_count'] < state['total_options']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é
            options_text = ""
            for i, opt in enumerate(state['options'], 1):
                options_text += f"{i}. {opt['text']} ({opt['category']}: {opt['value']})\n"
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                types.KeyboardButton('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'),
                types.KeyboardButton('–î–∏–∑–∞–π–Ω'),
                types.KeyboardButton('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å')
            )
            markup.add(
                types.KeyboardButton('DevOps'),
                types.KeyboardButton('–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'),
                types.KeyboardButton('Game Development'),
                types.KeyboardButton('AI/ML')
            )
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üìù –í–æ–ø—Ä–æ—Å: {state['question_text']}\n"
                         f"üìä –í–∞—Ä–∏–∞–Ω—Ç {state['option_count'] + 1} –∏–∑ {state['total_options']}\n\n"
                         f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{options_text}\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:",
                         reply_markup=markup)
            
            state['step'] = 2
        else:
            # –í—Å–µ –æ–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥
            options_text = ""
            for i, opt in enumerate(state['options'], 1):
                options_text += f"{i}. {opt['text']} ({opt['category']}: {opt['value']})\n"
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
                types.KeyboardButton('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
            )
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üìù –í–æ–ø—Ä–æ—Å: {state['question_text']}\n"
                         f"üìä –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n\n{options_text}\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=markup)
            
            state['step'] = 4
            
    elif step == 4:
        if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
            try:
                question_data = {
                    'text': state['question_text'],
                    'category': 'user_question',  # –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    'options': state['options']
                }
                
                question_id = db.add_question(question_data)
                
                del admin_states[user_id]
                bot.reply_to(message, f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {question_id}")
                admin_panel(message)
                
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                
        elif message.text == 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É
            state['step'] = 1
            state['options'] = []
            state['option_count'] = 0
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton('2 –≤–∞—Ä–∏–∞–Ω—Ç–∞'),
                types.KeyboardButton('3 –≤–∞—Ä–∏–∞–Ω—Ç–∞'),
                types.KeyboardButton('4 –≤–∞—Ä–∏–∞–Ω—Ç–∞')
            )
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üìù –í–æ–ø—Ä–æ—Å: {state['question_text']}\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:",
                         reply_markup=markup)
        else:
            bot.reply_to(message, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫")

@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
def delete_question_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        questions_dict = db.get_all_questions()
        if not questions_dict:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤–æ–ø—Ä–æ—Å–æ–≤
        question_ids = sorted(list(questions_dict.keys()))
        total_questions = len(question_ids)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        admin_states[user_id] = {
            'state': 'deleting_questions',
            'questions_dict': questions_dict,
            'question_ids': question_ids,
            'current_page': 0,
            'questions_per_page': 20
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        show_delete_questions_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_delete_questions_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    state = admin_states.get(user_id, {})
    questions_dict = state.get('questions_dict', {})
    question_ids = state.get('question_ids', [])
    current_page = state.get('current_page', 0)
    questions_per_page = state.get('questions_per_page', 20)
    
    total_questions = len(question_ids)
    total_pages = (total_questions + questions_per_page - 1) // questions_per_page
    
    if total_questions == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * questions_per_page
    end_idx = min(start_idx + questions_per_page, total_questions)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n\n"
    text += "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    for i in range(start_idx, end_idx):
        question_id = question_ids[i]
        question = questions_dict[question_id]
        text += f"üÜî {question_id}: {question['text'][:50]}...\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if total_pages > 1:
        if current_page > 0:
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        if current_page < total_pages - 1:
            markup.add(types.KeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥'))
    
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'deleting_questions')
def delete_question_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        questions_management(message)
        return
    
    if message.text in ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', '‚û°Ô∏è –í–ø–µ—Ä–µ–¥']:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        state = admin_states[user_id]
        current_page = state.get('current_page', 0)
        questions_per_page = state.get('questions_per_page', 20)
        question_ids = state.get('question_ids', [])
        total_questions = len(question_ids)
        total_pages = (total_questions + questions_per_page - 1) // questions_per_page
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' and current_page > 0:
            state['current_page'] = current_page - 1
        elif message.text == '‚û°Ô∏è –í–ø–µ—Ä–µ–¥' and current_page < total_pages - 1:
            state['current_page'] = current_page + 1
        
        show_delete_questions_page(message, user_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        question_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
        questions_dict = admin_states[user_id].get('questions_dict', {})
        if question_id not in questions_dict:
            bot.reply_to(message, f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        db.delete_question(question_id)
        
        del admin_states[user_id]
        bot.reply_to(message, f"‚úÖ –í–æ–ø—Ä–æ—Å {question_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        show_all_questions(message)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

@bot.message_handler(func=lambda message: message.text == 'üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—É–∑–∞–º–∏')
def universities_management(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—É–∑–∞–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—É–∑—ã'),
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—É–∑')
    )
    markup.add(
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—É–∑'),
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    
    bot.reply_to(message, 
                 "üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—É–∑–∞–º–∏\n\n"
                 "üìù –°–æ–∑–¥–∞–π—Ç–µ –≤—É–∑, –∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
                 "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—É–∑ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤—É–∑\n"
                 "‚Ä¢ üéì –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –≤—É–∑ - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—É–∑—ã')
def show_all_universities_admin(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—É–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        universities = db.get_unique_universities()
        if not universities:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—É–∑–æ–≤")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        admin_states[user_id] = {
            'state': 'viewing_universities',
            'universities': universities,
            'current_page': 0,
            'universities_per_page': 10
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        show_universities_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_universities_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—É–∑–∞–º–∏"""
    state = admin_states.get(user_id, {})
    universities = state.get('universities', [])
    current_page = state.get('current_page', 0)
    universities_per_page = state.get('universities_per_page', 10)
    
    total_universities = len(universities)
    total_pages = (total_universities + universities_per_page - 1) // universities_per_page
    
    if total_universities == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—É–∑–æ–≤")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * universities_per_page
    end_idx = min(start_idx + universities_per_page, total_universities)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = f"üìã –°–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤: {total_universities}\n\n"
    
    for i in range(start_idx, end_idx):
        university = universities[i]
        text += f"üèõÔ∏è {university['name']}\n"
        text += f"üìç –ì–æ—Ä–æ–¥: {university.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if university.get('url'):
            text += f"üåê –°–∞–π—Ç: {university['url']}\n"
        text += "‚îÄ" * 40 + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    if current_page < total_pages - 1:
        nav_buttons.append(types.KeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è'))
    
    if nav_buttons:
        markup.add(*nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    info_buttons = []
    if total_pages > 1:
        info_buttons.append(types.KeyboardButton(f'üìÑ {current_page + 1}/{total_pages}'))
    info_buttons.append(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å'))
    
    if info_buttons:
        markup.add(*info_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é'))
    
    bot.reply_to(message, text, reply_markup=markup, disable_web_page_preview=True)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'viewing_universities')
def handle_universities_navigation(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤—É–∑–∞–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    current_page = state.get('current_page', 0)
    total_pages = (len(state.get('universities', [])) + state.get('universities_per_page', 10) - 1) // state.get('universities_per_page', 10)
    
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if current_page > 0:
            state['current_page'] = current_page - 1
            admin_states[user_id] = state
            show_universities_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è':
        if current_page < total_pages - 1:
            state['current_page'] = current_page + 1
            admin_states[user_id] = state
            show_universities_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        try:
            universities = db.get_all_universities()
            state['universities'] = universities
            admin_states[user_id] = state
            show_universities_page(message, user_id)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    elif message.text == '‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é':
        del admin_states[user_id]
        universities_management(message)
    
    else:
        # –í—ã–±–æ—Ä –ø–æ –∏–º–µ–Ω–∏ –≤—É–∑–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
        name = message.text.strip()
        universities = state.get('universities', [])
        university = next((u for u in universities if u.get('name') == name), None)
        if university:
            show_university_details(message, user_id, name)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def show_university_details(message, user_id, university_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—É–∑–µ (–ø–æ –∏–º–µ–Ω–∏)"""
    state = admin_states.get(user_id, {})
    universities = state.get('universities', [])
    
    university = next((u for u in universities if u.get('name') == university_name), None)
    if not university:
        bot.reply_to(message, "‚ùå –í—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—É–∑–µ
    text = f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—É–∑–µ\n\n"
    text += f"üèõÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {university['name']}\n"
    text += f"üìç –ì–æ—Ä–æ–¥: {university.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    if university.get('url'):
        text += f"üåê –°–∞–π—Ç: {university['url']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å')
    )
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'))
    
    bot.reply_to(message, text, reply_markup=markup, disable_web_page_preview=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤—É–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    state['current_university_name'] = university_name
    admin_states[user_id] = state

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—É–∑')
def add_university_start(message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_states[user_id] = {'state': 'adding_university', 'step': 0}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, 
                 "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞\n\n"
                 "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'adding_university')
def add_university_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        admin_panel(message)
        return
    
    state = admin_states[user_id]
    step = state.get('step', 0)
    
    if step == 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞
        state['university_name'] = message.text
        state['step'] = 1
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –í—É–∑: {message.text}\n\n"
                     f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥ –≤—É–∑–∞:",
                     reply_markup=markup)
                     
    elif step == 1:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥
        state['city'] = message.text
        state['step'] = 2
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –í—É–∑: {state['university_name']}\n"
                     f"üìç –ì–æ—Ä–æ–¥: {message.text}\n\n"
                     f"üåê –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∞–π—Ç –≤—É–∑–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                     reply_markup=markup,
                     disable_web_page_preview=True)
                     
    elif step == 2:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–π—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ —Å–æ–∑–¥–∞–µ–º –≤—É–∑
        url = message.text if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤—É–∑–µ –≤ universities.json
            import json
            import os
            
            universities_file = 'universities.json'
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(universities_file):
                with open(universities_file, 'r', encoding='utf-8') as f:
                    universities = json.load(f)
            else:
                universities = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤—É–∑
            existing_uni = next((uni for uni in universities 
                               if uni['name'] == state['university_name'] and 
                               uni['city'] == state['city']), None)
            
            if existing_uni:
                bot.reply_to(message, 
                            f"‚ùå –í—É–∑ '{state['university_name']}' –≤ –≥–æ—Ä–æ–¥–µ '{state['city']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                del admin_states[user_id]
                admin_panel(message)
                return
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤—É–∑–µ (–±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π)
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
            new_university = {
                "name": state['university_name'],
                "city": state['city'],
                "url": url,
                "specialization": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "score_min": 0,
                "score_max": 0
            }
            
            universities.append(new_university)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(universities_file, 'w', encoding='utf-8') as f:
                json.dump(universities, f, ensure_ascii=False, indent=2)
            
            bot.reply_to(message, 
                         f"‚úÖ –í—É–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                         f"üìù –í—É–∑: {state['university_name']}\n"
                         f"üìç –ì–æ—Ä–æ–¥: {state['city']}\n"
                         f"üåê –°–∞–π—Ç: {url or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                         f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∫ —ç—Ç–æ–º—É –≤—É–∑—É —á–µ—Ä–µ–∑:\n"
                         f"üéì –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –≤—É–∑",
                         disable_web_page_preview=True)
            
            del admin_states[user_id]
            admin_panel(message)
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—É–∑–∞: {e}")
            del admin_states[user_id]
            admin_panel(message)

@bot.message_handler(func=lambda message: message.text in ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'])
def handle_university_actions(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—É–∑–æ–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    university_id = state.get('current_university_id')
    
    if message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        bot.reply_to(message, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å':
        uni_name = state.get('current_university_name')
        if uni_name:
            try:
                success = db.delete_university_by_name(uni_name)
                if success:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                    try:
                        db.sync_website_data()
                        bot.reply_to(message, f"‚úÖ –í—É–∑ '{uni_name}' –∏ –≤—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
                    except Exception as e:
                        bot.reply_to(message, f"‚úÖ –í—É–∑ —É–¥–∞–ª–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
                    del admin_states[user_id]
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—É–∑–∞–º–∏
                    universities_management(message)
                else:
                    bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—É–∑–∞ —Å ID {university_id}")
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        else:
            bot.reply_to(message, "‚ùå ID –≤—É–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    elif message.text == '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É':
        show_universities_page(message, user_id)



@bot.message_handler(func=lambda message: message.text == 'üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏')
def specializations_management(message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_text = """
üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
‚Ä¢ üéì –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –≤—É–∑
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –≤—É–∑–∞
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
‚Ä¢ ‚¨ÖÔ∏è –ù–∞–∑–∞–¥

üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤—É–∑ —á–µ—Ä–µ–∑ "üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—É–∑–∞–º–∏", 
   –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å.
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'),
        types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é')
    )
    markup.add(
        types.KeyboardButton('üéì –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –≤—É–∑'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –≤—É–∑–∞')
    )
    markup.add(
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é'),
        types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
    )
    
    bot.reply_to(message, admin_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' and admin_states.get(message.from_user.id, {}).get('state') == 'admin_main')
def specializations_back(message):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
def show_all_specializations(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        specializations_dict = db.get_all_specializations()
        if not specializations_dict:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        specialization_ids = sorted(list(specializations_dict.keys()))
        total_specializations = len(specialization_ids)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        admin_states[user_id] = {
            'state': 'viewing_specializations',
            'specializations_dict': specializations_dict,
            'specialization_ids': specialization_ids,
            'current_page': 0,
            'specializations_per_page': 10
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        show_specializations_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_specializations_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    state = admin_states.get(user_id, {})
    specializations_dict = state.get('specializations_dict', {})
    specialization_ids = state.get('specialization_ids', [])
    current_page = state.get('current_page', 0)
    specializations_per_page = state.get('specializations_per_page', 5)
    
    total_specializations = len(specialization_ids)
    total_pages = (total_specializations + specializations_per_page - 1) // specializations_per_page
    
    if total_specializations == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * specializations_per_page
    end_idx = min(start_idx + specializations_per_page, total_specializations)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    text = f"üìã –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {total_specializations}\n\n"
    
    for i in range(start_idx, end_idx):
        specialization_id = specialization_ids[i]
        specialization = specializations_dict[specialization_id]
        if specialization:
            text += f"üÜî ID: {specialization_id}\n"
            text += f"üéØ {specialization['name']}\n"
            text += f"üìù {specialization['description']}\n"
            text += f"üíº –ö–∞—Ä—å–µ—Ä–∞: {specialization['careers']}\n"
            text += "‚îÄ" * 40 + "\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    if current_page < total_pages - 1:
        nav_buttons.append(types.KeyboardButton('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è'))
    
    if nav_buttons:
        markup.add(*nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    info_buttons = []
    if total_pages > 1:
        info_buttons.append(types.KeyboardButton(f'üìÑ {current_page + 1}/{total_pages}'))
    info_buttons.append(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å'))
    
    if info_buttons:
        markup.add(*info_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é'))
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'viewing_specializations')
def handle_specializations_navigation(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    current_page = state.get('current_page', 0)
    total_pages = (len(state.get('specialization_ids', [])) + state.get('specializations_per_page', 5) - 1) // state.get('specializations_per_page', 5)
    
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        if current_page > 0:
            state['current_page'] = current_page - 1
            admin_states[user_id] = state
            show_specializations_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è':
        if current_page < total_pages - 1:
            state['current_page'] = current_page + 1
            admin_states[user_id] = state
            show_specializations_page(message, user_id)
        else:
            bot.reply_to(message, "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    
    elif message.text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        try:
            specializations_dict = db.get_all_specializations()
            specialization_ids = sorted(list(specializations_dict.keys()))
            state['specializations_dict'] = specializations_dict
            state['specialization_ids'] = specialization_ids
            admin_states[user_id] = state
            show_specializations_page(message, user_id)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    elif message.text == '‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é':
        del admin_states[user_id]
        specializations_management(message)
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            specialization_id = int(message.text)
            if specialization_id in state.get('specializations_dict', {}):
                show_specialization_details(message, user_id, specialization_id)
            else:
                bot.reply_to(message, "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def show_specialization_details(message, user_id, specialization_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    state = admin_states.get(user_id, {})
    specializations_dict = state.get('specializations_dict', {})
    
    specialization = specializations_dict.get(specialization_id)
    if not specialization:
        bot.reply_to(message, "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    text = f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
    text += f"üÜî ID: {specialization_id}\n"
    text += f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {specialization['name']}\n"
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {specialization['description']}\n"
    text += f"üíº –ö–∞—Ä—å–µ—Ä–∞: {specialization['careers']}\n"
    text += f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª: {specialization['tech_score']}\n"
    text += f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª: {specialization['analytic_score']}\n"
    text += f"üìä –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª: {specialization['creative_score']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
        types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å')
    )
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'))
    
    bot.reply_to(message, text, reply_markup=markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    state['current_specialization_id'] = specialization_id
    admin_states[user_id] = state

@bot.message_handler(func=lambda message: message.text in ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É'] and admin_states.get(message.from_user.id, {}).get('state') == 'viewing_specializations')
def handle_specialization_actions(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    state = admin_states.get(user_id, {})
    specializations_dict = state.get('specializations_dict', {})
    specialization_id = state.get('current_specialization_id')
    
    if message.text == '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É':
        show_specializations_page(message, user_id)
    
    elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å':
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if specialization_id:
            try:
                specialization = specializations_dict.get(specialization_id)
                if specialization:
                    success = db.delete_specialization(specialization_id)
                    if success:
                        bot.reply_to(message, f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '{specialization['name']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                    else:
                        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                else:
                    bot.reply_to(message, "‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            bot.reply_to(message, "‚ùå ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        del admin_states[user_id]
        show_all_specializations(message)
    
    elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        bot.reply_to(message, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        show_specialization_details(message, user_id, specialization_id)

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é')
def add_specialization_start(message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_states[user_id] = {'state': 'adding_specialization', 'step': 0}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, 
                 "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
                 "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'adding_specialization')
def add_specialization_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        specializations_management(message)
        return
    
    state = admin_states[user_id]
    step = state.get('step', 0)
    
    if step == 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        state['specialization_name'] = message.text
        state['step'] = 1
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {message.text}\n\n"
                     f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
                     reply_markup=markup)
                     
    elif step == 1:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        state['description'] = message.text
        state['step'] = 2
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['specialization_name']}\n"
                     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
                     f"üíº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
                     reply_markup=markup)
                     
    elif step == 2:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        state['careers'] = message.text
        state['step'] = 3
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üìù –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['specialization_name']}\n"
                     f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {state['description']}\n"
                     f"üíº –ö–∞—Ä—å–µ—Ä–∞: {message.text}\n\n"
                     f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª (0.0-1.0):\n"
                     f"‚Ä¢ 0.0 = –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤\n"
                     f"‚Ä¢ 0.5 = –°—Ä–µ–¥–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
                     f"‚Ä¢ 1.0 = –í—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
                     f"üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª:",
                     reply_markup=markup)
                     
    elif step == 3:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª
        try:
            tech_score = float(message.text)
            if tech_score < 0 or tech_score > 1:
                bot.reply_to(message, "‚ùå –ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                return
            
            state['tech_score'] = tech_score
            state['step'] = 4
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üìù –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['specialization_name']}\n"
                         f"üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª: {tech_score}\n\n"
                         f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª (0.0-1.0):\n"
                         f"‚Ä¢ 0.0 = –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                         f"‚Ä¢ 0.5 = –°—Ä–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
                         f"‚Ä¢ 1.0 = –í—ã—Å–æ–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
                         f"üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª:",
                         reply_markup=markup)
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            
    elif step == 4:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª
        try:
            analytic_score = float(message.text)
            if analytic_score < 0 or analytic_score > 1:
                bot.reply_to(message, "‚ùå –ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                return
            
            state['analytic_score'] = analytic_score
            state['step'] = 5
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üìù –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['specialization_name']}\n"
                         f"üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª: {analytic_score}\n\n"
                         f"üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª (0.0-1.0):\n"
                         f"‚Ä¢ 0.0 = –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n"
                         f"‚Ä¢ 0.5 = –°—Ä–µ–¥–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
                         f"‚Ä¢ 1.0 = –í—ã—Å–æ–∫–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
                         f"üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª:",
                         reply_markup=markup)
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            
    elif step == 5:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª
        try:
            creative_score = float(message.text)
            if creative_score < 0 or creative_score > 1:
                bot.reply_to(message, "‚ùå –ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
                return
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –±–∞–∑—É
                db.add_specialization(
                    state['specialization_name'],
                    state['description'],
                    state['tech_score'],
                    state['analytic_score'],
                    creative_score,
                    state['careers']
                )
                
                del admin_states[user_id]
                bot.reply_to(message, "‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                specializations_management(message)
                
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@bot.message_handler(func=lambda message: message.text == 'üéì –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –≤—É–∑')
def add_specialization_to_university_start(message):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤—É–∑"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    try:
        specializations = db.get_all_specializations()
        if not specializations:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
            specializations_management(message)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        spec_list = []
        for spec_id, spec_data in specializations.items():
            spec_list.append(f"{spec_id}. {spec_data['name']}")
        
        spec_text = "\n".join(spec_list)
        
        admin_states[user_id] = {
            'state': 'adding_spec_to_uni',
            'step': 0,
            'specializations': specializations
        }
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üéì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤—É–∑\n\n"
                     f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n{spec_text}\n\n"
                     f"üìù –í–≤–µ–¥–∏—Ç–µ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
                     reply_markup=markup)
                     
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'adding_spec_to_uni')
def add_specialization_to_university_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –≤—É–∑"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        specializations_management(message)
        return
    
    state = admin_states[user_id]
    step = state.get('step', 0)
    
    if step == 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            spec_id = int(message.text)
            if spec_id not in state['specializations']:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            spec_data = state['specializations'][spec_id]
            state['spec_id'] = spec_id
            state['spec_name'] = spec_data['name']
            state['step'] = 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—É–∑–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
            try:
                import json
                import os
                
                universities_file = 'universities.json'
                if os.path.exists(universities_file):
                    with open(universities_file, 'r', encoding='utf-8') as f:
                        all_universities = json.load(f)
                else:
                    all_universities = []
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—É–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ—Ä–æ–¥—É
                unique_universities = {}
                for uni in all_universities:
                    key = (uni['name'], uni['city'])
                    if key not in unique_universities:
                        unique_universities[key] = uni
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
                uni_list = []
                uni_id = 1
                for (name, city), uni_data in unique_universities.items():
                    uni_list.append(f"{uni_id}. {name} ({city})")
                    uni_id += 1
                
                state['unique_universities'] = list(unique_universities.values())
                state['uni_id'] = uni_id - 1
                
                uni_text = "\n".join(uni_list)
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
                
                bot.reply_to(message, 
                             f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_data['name']}\n\n"
                             f"üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—É–∑—ã:\n{uni_text}\n\n"
                             f"üìù –í–≤–µ–¥–∏—Ç–µ ID –≤—É–∑–∞ (–∏–ª–∏ 0 –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞):",
                             reply_markup=markup)
                             
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—É–∑–æ–≤: {e}")
                return
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            
    elif step == 1:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—É–∑–∞
        try:
            uni_choice = int(message.text)
            
            if uni_choice == 0:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—É–∑
                state['step'] = 2
                state['is_new_university'] = True
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
                
                bot.reply_to(message, 
                             f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                             f"üèõÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞\n\n"
                             f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞:",
                             reply_markup=markup)
                             
            elif 1 <= uni_choice <= state['uni_id']:
                # –í—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—É–∑
                selected_uni = state['unique_universities'][uni_choice - 1]
                state['university_name'] = selected_uni['name']
                state['city'] = selected_uni['city']
                state['is_new_university'] = False
                state['step'] = 4  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
                
                bot.reply_to(message, 
                             f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                             f"üèõÔ∏è –í—É–∑: {selected_uni['name']} ({selected_uni['city']})\n\n"
                             f"üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –ï–ì–≠:",
                             reply_markup=markup)
                             
            else:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤—É–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
                
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤—É–∑–∞")
            
    elif step == 2:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞
        state['university_name'] = message.text
        state['step'] = 3
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                     f"üèõÔ∏è –í—É–∑: {message.text}\n\n"
                     f"üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—É–∑–∞:",
                     reply_markup=markup)
                     
    elif step == 3:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞
        state['city'] = message.text
        state['step'] = 4
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                     f"üèõÔ∏è –í—É–∑: {state['university_name']}\n"
                     f"üèôÔ∏è –ì–æ—Ä–æ–¥: {message.text}\n\n"
                     f"üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –ï–ì–≠:",
                     reply_markup=markup)
                     
    elif step == 4:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        try:
            score_min = float(message.text)
            if score_min < 0 or score_min > 400:
                bot.reply_to(message, "‚ùå –ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 400")
                return
            
            state['score_min'] = score_min
            state['step'] = 5
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            city_info = f" ({state['city']})" if state.get('city') else ""
            bot.reply_to(message, 
                         f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                         f"üèõÔ∏è –í—É–∑: {state['university_name']}{city_info}\n"
                         f"üìä –ú–∏–Ω. –±–∞–ª–ª: {score_min}\n\n"
                         f"üìä –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –ï–ì–≠:",
                         reply_markup=markup)
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            
    elif step == 5:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∏ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
        try:
            score_max = float(message.text)
            if score_max < state['score_min'] or score_max > 400:
                bot.reply_to(message, f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({state['score_min']}) –∏ –Ω–µ –±–æ–ª–µ–µ 400")
                return
            
            state['score_max'] = score_max
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ JSON —Ñ–∞–π–ª
                new_university = {
                    "name": state['university_name'],
                    "city": state['city'],
                    "score_min": state['score_min'],
                    "score_max": state['score_max'],
                    "url": "",  # –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞, —Ç–∞–∫ –∫–∞–∫ –≤—É–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    "specialization": state['spec_name']
                }
                
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª universities.json
                import json
                import os
                
                universities_file = 'universities.json'
                if os.path.exists(universities_file):
                    with open(universities_file, 'r', encoding='utf-8') as f:
                        universities = json.load(f)
                else:
                    universities = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
                universities.append(new_university)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                with open(universities_file, 'w', encoding='utf-8') as f:
                    json.dump(universities, f, ensure_ascii=False, indent=2)
                
                del admin_states[user_id]
                bot.reply_to(message, 
                             f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                             f"üéì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {state['spec_name']}\n"
                             f"üèõÔ∏è –í—É–∑: {state['university_name']}\n"
                             f"üèôÔ∏è –ì–æ—Ä–æ–¥: {state['city']}\n"
                             f"üìä –ë–∞–ª–ª—ã: {state['score_min']}-{state['score_max']}")
                
                specializations_management(message)
                
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: {e}")
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –≤—É–∑–∞')
def delete_specialization_from_university_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ universities.json
        import json
        import os
        
        universities_file = 'universities.json'
        if not os.path.exists(universities_file):
            bot.reply_to(message, "üì≠ –§–∞–π–ª universities.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(universities_file, 'r', encoding='utf-8') as f:
            universities = json.load(f)
        
        if not universities:
            bot.reply_to(message, "üì≠ –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—É–∑–∞—Ö")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—É–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ—Ä–æ–¥—É
        grouped_unis = {}
        for uni in universities:
            key = f"{uni['name']} ({uni['city']})"
            if key not in grouped_unis:
                grouped_unis[key] = []
            grouped_unis[key].append(uni)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        uni_list = []
        uni_id = 1
        for uni_name, uni_data in grouped_unis.items():
            specs_count = len(uni_data)
            uni_list.append(f"{uni_id}. {uni_name} - {specs_count} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
            uni_id += 1
        
        admin_states[user_id] = {
            'state': 'deleting_spec_from_uni',
            'step': 0,
            'grouped_unis': grouped_unis,
            'uni_list': list(grouped_unis.keys())
        }
        
        uni_text = "\n".join(uni_list)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
        
        bot.reply_to(message, 
                     f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –≤—É–∑–∞\n\n"
                     f"üèõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—É–∑—ã:\n{uni_text}\n\n"
                     f"üìù –í–≤–µ–¥–∏—Ç–µ ID –≤—É–∑–∞:",
                     reply_markup=markup)
                     
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'deleting_spec_from_uni')
def delete_specialization_from_university_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        specializations_management(message)
        return
    
    state = admin_states[user_id]
    step = state.get('step', 0)
    
    if step == 0:
        # –í—ã–±–æ—Ä –≤—É–∑–∞
        try:
            uni_choice = int(message.text)
            if uni_choice < 1 or uni_choice > len(state['uni_list']):
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤—É–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            selected_uni_key = state['uni_list'][uni_choice - 1]
            selected_uni_data = state['grouped_unis'][selected_uni_key]
            
            state['selected_uni_key'] = selected_uni_key
            state['selected_uni_data'] = selected_uni_data
            state['step'] = 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –≤—É–∑–∞
            specs_list = []
            for i, spec in enumerate(selected_uni_data):
                specs_list.append(f"{i + 1}. {spec['specialization']} ({spec['score_min']}-{spec['score_max']})")
            
            specs_text = "\n".join(specs_list)
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
            
            bot.reply_to(message, 
                         f"üèõÔ∏è –í—É–∑: {selected_uni_key}\n\n"
                         f"üìã –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n{specs_text}\n\n"
                         f"üìù –í–≤–µ–¥–∏—Ç–µ ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                         reply_markup=markup)
                         
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤—É–∑–∞")
            
    elif step == 1:
        # –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        try:
            spec_choice = int(message.text)
            if spec_choice < 1 or spec_choice > len(state['selected_uni_data']):
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            selected_spec = state['selected_uni_data'][spec_choice - 1]
            
            # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            try:
                import json
                import os
                
                universities_file = 'universities.json'
                with open(universities_file, 'r', encoding='utf-8') as f:
                    all_universities = json.load(f)
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                for i, uni in enumerate(all_universities):
                    if (uni['name'] == selected_spec['name'] and 
                        uni['city'] == selected_spec['city'] and 
                        uni['specialization'] == selected_spec['specialization']):
                        del all_universities[i]
                        break
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(universities_file, 'w', encoding='utf-8') as f:
                    json.dump(all_universities, f, ensure_ascii=False, indent=2)
                
                del admin_states[user_id]
                bot.reply_to(message, 
                             f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                             f"üèõÔ∏è –í—É–∑: {state['selected_uni_key']}\n"
                             f"üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {selected_spec['specialization']}\n"
                             f"üìä –ë–∞–ª–ª—ã: {selected_spec['score_min']}-{selected_spec['score_max']}")
                
                specializations_management(message)
                
            except Exception as e:
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")

@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é')
def delete_specialization_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        specializations = db.get_all_specializations()
        if not specializations:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        specialization_ids = sorted(list(specializations.keys()))
        total_specializations = len(specialization_ids)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        admin_states[user_id] = {
            'state': 'deleting_specializations',
            'specializations': specializations,
            'specialization_ids': specialization_ids,
            'current_page': 0,
            'specializations_per_page': 20
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        show_delete_specializations_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_delete_specializations_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    state = admin_states.get(user_id, {})
    specializations = state.get('specializations', {})
    specialization_ids = state.get('specialization_ids', [])
    current_page = state.get('current_page', 0)
    specializations_per_page = state.get('specializations_per_page', 20)
    
    total_specializations = len(specialization_ids)
    total_pages = (total_specializations + specializations_per_page - 1) // specializations_per_page
    
    if total_specializations == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * specializations_per_page
    end_idx = min(start_idx + specializations_per_page, total_specializations)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {total_specializations}\n\n"
    text += "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    for i in range(start_idx, end_idx):
        specialization_id = specialization_ids[i]
        specialization = specializations[specialization_id]
        text += f"üÜî {specialization_id}: {specialization['name']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if total_pages > 1:
        if current_page > 0:
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        if current_page < total_pages - 1:
            markup.add(types.KeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥'))
    
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'deleting_specializations')
def delete_specialization_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        specializations_management(message)
        return
    
    if message.text in ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', '‚û°Ô∏è –í–ø–µ—Ä–µ–¥']:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        state = admin_states[user_id]
        current_page = state.get('current_page', 0)
        specializations_per_page = state.get('specializations_per_page', 20)
        specialization_ids = state.get('specialization_ids', [])
        total_specializations = len(specialization_ids)
        total_pages = (total_specializations + specializations_per_page - 1) // specializations_per_page
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' and current_page > 0:
            state['current_page'] = current_page - 1
        elif message.text == '‚û°Ô∏è –í–ø–µ—Ä–µ–¥' and current_page < total_pages - 1:
            state['current_page'] = current_page + 1
        
        show_delete_specializations_page(message, user_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        specialization_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        specializations = admin_states[user_id].get('specializations', {})
        if specialization_id not in specializations:
            bot.reply_to(message, f"‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å ID {specialization_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        db.delete_specialization(specialization_id)
        
        del admin_states[user_id]
        bot.reply_to(message, f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {specialization_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        show_all_specializations(message)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—É–∑')
def delete_university_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        universities = db.get_unique_universities()
        if not universities:
            bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—É–∑–æ–≤")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        admin_states[user_id] = {
            'state': 'deleting_universities',
            'universities': universities,
            'current_page': 0,
            'universities_per_page': 20
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        show_delete_universities_page(message, user_id)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_delete_universities_page(message, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—É–∑–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    state = admin_states.get(user_id, {})
    universities = state.get('universities', [])
    current_page = state.get('current_page', 0)
    universities_per_page = state.get('universities_per_page', 20)
    
    total_universities = len(universities)
    total_pages = (total_universities + universities_per_page - 1) // universities_per_page
    
    if total_universities == 0:
        bot.reply_to(message, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—É–∑–æ–≤")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * universities_per_page
    end_idx = min(start_idx + universities_per_page, total_universities)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã (ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    text = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—É–∑–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages})\n"
    text += f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤: {total_universities}\n\n"
    text += "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤—É–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    for i in range(start_idx, end_idx):
        university = universities[i]
        text += f"üÜî {i + 1}: {university['name']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if total_pages > 1:
        if current_page > 0:
            markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        if current_page < total_pages - 1:
            markup.add(types.KeyboardButton('‚û°Ô∏è –í–ø–µ—Ä–µ–¥'))
    
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, text, reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'deleting_universities')
def delete_university_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—É–∑–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        admin_panel(message)
        return
    
    if message.text in ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', '‚û°Ô∏è –í–ø–µ—Ä–µ–¥']:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        state = admin_states[user_id]
        current_page = state.get('current_page', 0)
        universities_per_page = state.get('universities_per_page', 20)
        universities = state.get('universities', [])
        total_universities = len(universities)
        total_pages = (total_universities + universities_per_page - 1) // universities_per_page
        
        if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' and current_page > 0:
            state['current_page'] = current_page - 1
        elif message.text == '‚û°Ô∏è –í–ø–µ—Ä–µ–¥' and current_page < total_pages - 1:
            state['current_page'] = current_page + 1
        
        show_delete_universities_page(message, user_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –≤—É–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    try:
        university_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—É–∑ —Å —Ç–∞–∫–∏–º ID
        universities = admin_states[user_id].get('universities', [])
        universities_per_page = admin_states[user_id].get('universities_per_page', 20)
        current_page = admin_states[user_id].get('current_page', 0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        start_idx = current_page * universities_per_page
        real_index = start_idx + university_id - 1
        
        if real_index < 0 or real_index >= len(universities):
            bot.reply_to(message, f"‚ùå –í—É–∑ —Å ID {university_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        university = universities[real_index]
        university_name = university['name']
        
        # –£–¥–∞–ª—è–µ–º –≤—É–∑ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        success = db.delete_university_by_name(university_name)
        
        if success:
            del admin_states[user_id]
            bot.reply_to(message, f"‚úÖ –í—É–∑ '{university_name}' –∏ –≤—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            try:
                db.sync_website_data()
            except Exception as e:
                bot.reply_to(message, f"‚ö†Ô∏è –í—É–∑ —É–¥–∞–ª–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—É–∑–∞–º–∏
            universities_management(message)
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—É–∑–∞ '{university_name}'")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—É–∑–∞: {e}")

@bot.message_handler(func=lambda message: message.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
def broadcast_start(message):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    admin_states[user_id] = {'state': 'broadcasting'}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞'))
    
    bot.reply_to(message, 
                 "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", 
                 reply_markup=markup)

@bot.message_handler(func=lambda message: admin_states.get(message.from_user.id, {}).get('state') == 'broadcasting')
def broadcast_process(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞':
        del admin_states[user_id]
        admin_panel(message)
        return
    
    try:
        users = db.get_all_users()
        sent_count = 0
        error_count = 0
        
        for user_id in users:
            try:
                bot.send_message(user_id, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}", disable_web_page_preview=True)
                sent_count += 1
            except Exception:
                error_count += 1
                # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        bot.reply_to(message, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        admin_states[message.from_user.id] = {'state': 'admin_main'}
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def detailed_statistics(message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats = get_admin_statistics()
        
        text = f"""
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {stats['completed_tests']}
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}
‚Ä¢ –í—Å–µ–≥–æ –≤—É–∑–æ–≤: {stats['total_universities']}
‚Ä¢ –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {stats['total_specializations']}

üìù –ö–æ–Ω—Ç–µ–Ω—Ç:
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}
‚Ä¢ –í—Å–µ–≥–æ –≤—É–∑–æ–≤: {stats['total_universities']}
‚Ä¢ –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {stats['total_specializations']}

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: ~10-15 –º–∏–Ω—É—Ç
        """
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        
        bot.reply_to(message, text, reply_markup=markup)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def go_back(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    admin_panel(message)

@bot.message_handler(func=lambda message: message.text == '‚¨ÖÔ∏è –í—ã—Ö–æ–¥')
def exit_admin(message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if user_id in admin_states:
        del admin_states[user_id]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    welcome_text = """
üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ç–æ—Ä!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é IT-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.

üìã –¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 30 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!
    """
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'))
    markup.add(types.KeyboardButton('–ü–æ–º–æ—â—å'))
    
    bot.reply_to(message, welcome_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç')
def handle_detailed_report(message):
    try:
        user_id = message.from_user.id
        state = user_states.get(user_id) or {}
        scores = state.get('saved_scores')
        percentages = state.get('saved_percentages')
        top_spec = state.get('saved_specialization')
        answers = state.get('answers', {})
        
        if not scores or not percentages or not top_spec or not answers:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
        analysis = analyze_answers(answers)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
        lines = [f"üìä <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –û–¢–í–ï–¢–û–í</b>\n"]
        lines.append(f"üéØ <b>–ì–ª–∞–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {top_spec}\n")
        
        # –û–±—â–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        lines.append("üìà <b>–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:</b>")
        for k, v in sorted(percentages.items(), key=lambda x: -x[1]):
            lines.append(f"‚Ä¢ {k}: {v}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        lines.append(f"\nüîç <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π:</b>")
        lines.append(analysis['tendencies'])
        
        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        lines.append(f"\nüí™ <b>–í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>")
        for strength in analysis['strengths']:
            lines.append(f"‚Ä¢ {strength}")
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        if analysis['weaknesses']:
            lines.append(f"\nüìö <b>–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</b>")
            for weakness in analysis['weaknesses']:
                lines.append(f"‚Ä¢ {weakness}")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        lines.append(f"\nüí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>")
        for rec in analysis['recommendations']:
            lines.append(f"‚Ä¢ {rec}")
        
        # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏
        lines.append(f"\nüöÄ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏:</b>")
        for career in analysis['careers']:
            lines.append(f"‚Ä¢ {career}")
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        lines.append(f"\nüéØ <b>–í–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>")
        for step in analysis['next_steps']:
            lines.append(f"‚Ä¢ {step}")
        
        bot.send_message(message.chat.id, "\n".join(lines), parse_mode='HTML')
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def analyze_answers(answers):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç"""
    analysis = {
        'tendencies': '',
        'strengths': [],
        'weaknesses': [],
        'recommendations': [],
        'careers': [],
        'next_steps': []
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_counts = {'code': 0, 'data': 0, 'design': 0, 'security': 0, 'devops': 0, 'mobile': 0, 'game': 0, 'ai_ml': 0}
    
    for question_id, answer_value in answers.items():
        question = db.get_question(int(question_id))
        if question:
            for option in question['options']:
                if option['value'] == answer_value:
                    category = option['category']
                    category_counts[category] += 1
                    break
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏
    max_category = max(category_counts, key=category_counts.get)
    max_count = category_counts[max_category]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏
    if max_category == 'data':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –∏ —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é, –∞–Ω–∞–ª–∏–∑—É –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á, –ª—é–±–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ –Ω–∏—Ö —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏. –í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö."
        analysis['strengths'].extend([
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏–∫–∞",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏",
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á",
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas, numpy)",
            "–û—Å–≤–æ–π—Ç–µ SQL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
            "–ò–∑—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (scikit-learn)",
            "–ò–∑—É—á–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (matplotlib, seaborn)",
            "–û—Å–≤–æ–π—Ç–µ Big Data —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (Hadoop, Spark)"
        ])
        analysis['careers'].extend([
            "Data Scientist",
            "Data Analyst", 
            "Business Intelligence Analyst",
            "Machine Learning Engineer",
            "Quantitative Analyst",
            "Research Scientist"
        ])
        analysis['next_steps'].extend([
            "–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å –ø–æ Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã SQL",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ Kaggle",
            "–ò–∑—É—á–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç–µ–æ—Ä–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        ])
        
    elif max_category == 'code':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. –í—ã –ª—é–±–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –ø–æ—ç—Ç–∞–ø–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
        analysis['strengths'].extend([
            "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–µ—à–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º",
            "–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö",
            "–û—Å–≤–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (Python, Java, C++)",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ LeetCode",
            "–ò–∑—É—á–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–û—Å–≤–æ–π—Ç–µ Git –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π"
        ])
        analysis['careers'].extend([
            "Software Engineer",
            "Backend Developer",
            "Full Stack Developer",
            "Systems Architect",
            "Software Architect",
            "Technical Lead"
        ])
        analysis['next_steps'].extend([
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ",
            "–ò–∑—É—á–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ open-source –ø—Ä–æ–µ–∫—Ç–∞–º",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞",
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"
        ])
        
    elif max_category == 'design':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –¥–∏–∑–∞–π–Ω—É –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É. –í—ã —Ü–µ–Ω–∏—Ç–µ —ç—Å—Ç–µ—Ç–∏–∫—É, –æ–±—Ä–∞—â–∞–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏. –í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
        analysis['strengths'].extend([
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ß—É–≤—Å—Ç–≤–æ —ç—Å—Ç–µ—Ç–∏–∫–∏",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –¥–∏–∑–∞–π–Ω–∞",
            "–≠–º–ø–∞—Ç–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–∏–∑–∞–π–Ω–∞",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ (Figma, Adobe XD)",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ü–≤–µ—Ç–æ–≤–µ–¥–µ–Ω–∏—è",
            "–ò–∑—É—á–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (accessibility)",
            "–û—Å–≤–æ–π—Ç–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—é"
        ])
        analysis['careers'].extend([
            "UX/UI Designer",
            "Product Designer",
            "Visual Designer",
            "Interaction Designer",
            "UX Researcher",
            "Design System Designer"
        ])
        analysis['next_steps'].extend([
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å Figma –∏–ª–∏ Adobe XD",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã UX/UI –¥–∏–∑–∞–π–Ω–∞",
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–æ–≤",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏",
            "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º"
        ])
        
    elif max_category == 'security':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∑–∞—â–∏—Ç–µ —Å–∏—Å—Ç–µ–º, –∞–Ω–∞–ª–∏–∑—É —É–≥—Ä–æ–∑ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º, –º—ã—Å–ª–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±–Ω—ã –ø—Ä–µ–¥–≤–∏–¥–µ—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏. –í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤."
        analysis['strengths'].extend([
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏—Ç—å –∫–∞–∫ –∞—Ç–∞–∫—É—é—â–∏–π",
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–û—Å–≤–æ–π—Ç–µ Linux –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É",
            "–ò–∑—É—á–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ CTF (Capture The Flag) –∑–∞–¥–∞—á–∏",
            "–ò–∑—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥–∞"
        ])
        analysis['careers'].extend([
            "Cybersecurity Analyst",
            "Penetration Tester",
            "Security Engineer",
            "Incident Response Specialist",
            "Security Architect",
            "Threat Intelligence Analyst"
        ])
        analysis['next_steps'].extend([
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã Linux",
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–µ—Ç–µ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ CTF –∑–∞–¥–∞—á–∏ –Ω–∞ HackTheBox",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ])
        
    elif max_category == 'devops':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ DevOps –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º. –í—ã —Ü–µ–Ω–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á."
        analysis['strengths'].extend([
            "–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç—Ä—É–¥–∏—Ü–∏—è",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ Linux –∏ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É",
            "–û—Å–≤–æ–π—Ç–µ Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é",
            "–ò–∑—É—á–∏—Ç–µ CI/CD –ø—Ä–∞–∫—Ç–∏–∫–∏",
            "–û—Å–≤–æ–π—Ç–µ –æ–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (AWS, Azure, GCP)",
            "–ò–∑—É—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ (Kubernetes)"
        ])
        analysis['careers'].extend([
            "DevOps Engineer",
            "Site Reliability Engineer",
            "Platform Engineer",
            "Infrastructure Engineer",
            "Cloud Engineer",
            "Automation Engineer"
        ])
        analysis['next_steps'].extend([
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã Linux",
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å Docker",
            "–û—Å–≤–æ–π—Ç–µ Git –∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD pipeline",
            "–ò–∑—É—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º"
        ])
        
    elif max_category == 'mobile':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –í—ã —Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."
        analysis['strengths'].extend([
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–±–∏–ª—å–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º",
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ Swift –¥–ª—è iOS –∏–ª–∏ Kotlin –¥–ª—è Android",
            "–û—Å–≤–æ–π—Ç–µ React Native –∏–ª–∏ Flutter",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ UX",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Xcode, Android Studio)",
            "–ò–∑—É—á–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–±–∏–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        ])
        analysis['careers'].extend([
            "iOS Developer",
            "Android Developer",
            "Mobile App Developer",
            "Cross-platform Developer",
            "Mobile UI/UX Designer",
            "Mobile Product Manager"
        ])
        analysis['next_steps'].extend([
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (iOS –∏–ª–∏ Android)",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ UX",
            "–û—Å–≤–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "–ò–∑—É—á–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
        ])
        
    elif max_category == 'game':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∏–≥—Ä–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏–≥—Ä, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –í—ã —Ü–µ–Ω–∏—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è."
        analysis['strengths'].extend([
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏–≥—Ä–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –æ–ø—ã—Ç—É",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ Unity –∏–ª–∏ Unreal Engine",
            "–û—Å–≤–æ–π—Ç–µ C# –∏–ª–∏ C++",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≥–µ–π–º–¥–∏–∑–∞–π–Ω–∞",
            "–û—Å–≤–æ–π—Ç–µ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–ò–∑—É—á–∏—Ç–µ –∏–≥—Ä–æ–≤—É—é —Ñ–∏–∑–∏–∫—É",
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–≥—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        ])
        analysis['careers'].extend([
            "Game Developer",
            "Game Designer",
            "Unity Developer",
            "Unreal Engine Developer",
            "Game Programmer",
            "Technical Artist"
        ])
        analysis['next_steps'].extend([
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å Unity –∏–ª–∏ Unreal Engine",
            "–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –≥–µ–π–º–¥–∏–∑–∞–π–Ω–∞",
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–æ—Å—Ç—É—é –∏–≥—Ä—É",
            "–ò–∑—É—á–∏—Ç–µ C# –∏–ª–∏ C++",
            "–û—Å–≤–æ–π—Ç–µ –æ—Å–Ω–æ–≤—ã 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–ò–∑—É—á–∏—Ç–µ –∏–≥—Ä–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
        ])
        
    elif max_category == 'ai_ml':
        analysis['tendencies'] = "–í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Å–∏–ª—å–Ω—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –í—ã —Ü–µ–Ω–∏—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Ç—Å—è –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è."
        analysis['strengths'].extend([
            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"
        ])
        analysis['recommendations'].extend([
            "–ò–∑—É—á–∏—Ç–µ Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ML (scikit-learn, TensorFlow, PyTorch)",
            "–û—Å–≤–æ–π—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É (–ª–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –º–∞—Ç. –∞–Ω–∞–ª–∏–∑)",
            "–ò–∑—É—á–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "–û—Å–≤–æ–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            "–ò–∑—É—á–∏—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        ])
        analysis['careers'].extend([
            "Machine Learning Engineer",
            "AI Research Scientist",
            "Data Scientist",
            "NLP Engineer",
            "Computer Vision Engineer",
            "AI Product Manager"
        ])
        analysis['next_steps'].extend([
            "–ò–∑—É—á–∏—Ç–µ Python –∏ –æ—Å–Ω–æ–≤—ã ML",
            "–û—Å–≤–æ–π—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è ML",
            "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å scikit-learn",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ Kaggle",
            "–ò–∑—É—á–∏—Ç–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π ML –ø—Ä–æ–µ–∫—Ç"
        ])
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å 0 –æ—Ç–≤–µ—Ç–æ–≤)
    for category, count in category_counts.items():
        if count == 0:
            if category == 'code':
                analysis['weaknesses'].append("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏")
            elif category == 'data':
                analysis['weaknesses'].append("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö - –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ")
            elif category == 'design':
                analysis['weaknesses'].append("–î–∏–∑–∞–π–Ω - –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
            elif category == 'security':
                analysis['weaknesses'].append("–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            elif category == 'devops':
                analysis['weaknesses'].append("DevOps - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            elif category == 'mobile':
                analysis['weaknesses'].append("–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            elif category == 'game':
                analysis['weaknesses'].append("–ò–≥—Ä–æ–≤–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä")
            elif category == 'ai_ml':
                analysis['weaknesses'].append("–ò–ò/ML - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    
    return analysis

# ============================================================================
# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –≤—Å–µ—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
# ============================================================================

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{message.text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if message.text.startswith('/'):
        if message.text == '/admin':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
            admin_panel(message)
            return
        elif message.text == '/start':
            start(message)
            return
        elif message.text == '/help':
            help_command(message)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if user_id in admin_states:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if user_id not in user_states:
        bot.reply_to(message, "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    current_state = user_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    if 'current_question' not in current_state:
        bot.reply_to(message, "‚ùå –¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    current_question = current_state['current_question']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î
    all_questions = db.get_all_questions()
    question_ids = sorted(all_questions.keys())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö
    if current_question > len(question_ids):
        bot.reply_to(message, f"‚ùå –í–æ–ø—Ä–æ—Å {current_question} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É
    question_id = question_ids[current_question - 1]
    question = all_questions[question_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    valid_answers = [option['text'] for option in question['options']]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"üîç –í–æ–ø—Ä–æ—Å {current_question}:")
    print(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{message.text}'")
    print(f"‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ç–≤–µ—Ç—ã: {valid_answers}")
    
    if message.text not in valid_answers:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        print(f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answer_value = next(option['value'] for option in question['options'] if option['text'] == message.text)
    current_state['answers'][str(question_id)] = answer_value
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        db.update_user_answers(user_id, question_id, answer_value)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_state['current_question'] += 1
    
    total_questions = len(question_ids)
    print(f"üîç –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {current_state['current_question']}, –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    
    if current_state['current_question'] <= total_questions:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å {current_state['current_question']}")
        send_question(message.chat.id, user_id, current_state['current_question'])
    else:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        print(f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        show_results(message)
        return  # –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

def show_results(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        user_id = message.from_user.id
        current_state = user_states[user_id]
        
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")
        print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(current_state.get('answers', {}))}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        spec_info = None
        specialization = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'saved_scores' in current_state and 'saved_percentages' in current_state:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            scores = current_state['saved_scores']
            specialization_percentages = current_state['saved_percentages']
            specialization = current_state['saved_specialization']
            spec_info = current_state['saved_spec_info']
        else:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–Ω–æ–≤–æ
            print(f"üîç –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–Ω–æ–≤–æ...")
            scores = {
                "code": 0, "data": 0, "design": 0, "security": 0,
                "devops": 0, "mobile": 0, "game": 0, "ai_ml": 0
            }
            
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(current_state['answers'])} –æ—Ç–≤–µ—Ç–æ–≤...")
            for question_id, answer_value in current_state['answers'].items():
                print(f"üîç –í–æ–ø—Ä–æ—Å {question_id}: –∑–Ω–∞—á–µ–Ω–∏–µ {answer_value}")
                question = db.get_question(int(question_id))
                if question:
                    for option in question['options']:
                        if option['value'] == answer_value:
                            category = option['category']
                            scores[category] += answer_value
                            print(f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ {answer_value} –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                            break
            
            print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {scores}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö 8 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
            total_score = sum(scores.values())
            print(f"üìä –û–±—â–∏–π –±–∞–ª–ª: {total_score}")
            
            if total_score > 0:
                # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                base_percentages = {
                    "code": int((scores["code"] / total_score) * 100),
                    "data": int((scores["data"] / total_score) * 100),
                    "design": int((scores["design"] / total_score) * 100),
                    "security": int((scores["security"] / total_score) * 100),
                    "devops": int((scores["devops"] / total_score) * 100),
                    "mobile": int((scores["mobile"] / total_score) * 100),
                    "game": int((scores["game"] / total_score) * 100),
                    "ai_ml": int((scores["ai_ml"] / total_score) * 100)
                }
                
                print(f"üìä –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {base_percentages}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö 8 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
                specialization_percentages = {
                    "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": base_percentages["code"],
                    "Data Science": base_percentages["data"],
                    "UX/UI –¥–∏–∑–∞–π–Ω": base_percentages["design"],
                    "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": base_percentages["security"],
                    "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": base_percentages["devops"] if base_percentages["devops"] > 0 else int((base_percentages["code"] * 0.7 + base_percentages["security"] * 0.3)),
                    "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": base_percentages["mobile"] if base_percentages["mobile"] > 0 else int((base_percentages["code"] * 0.6 + base_percentages["design"] * 0.4)),
                    "Game Development": base_percentages["game"] if base_percentages["game"] > 0 else int((base_percentages["design"] * 0.7 + base_percentages["code"] * 0.3)),
                    "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": base_percentages["ai_ml"] if base_percentages["ai_ml"] > 0 else int((base_percentages["data"] * 0.8 + base_percentages["code"] * 0.2))
                }
            else:
                base_percentages = {
                    "code": 0, "data": 0, "design": 0, "security": 0,
                    "devops": 0, "mobile": 0, "game": 0, "ai_ml": 0
                }
                specialization_percentages = {
                    "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": 0,
                    "Data Science": 0,
                    "UX/UI –¥–∏–∑–∞–π–Ω": 0,
                    "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": 0,
                    "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": 0,
                    "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": 0,
                    "Game Development": 0,
                    "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": 0
                }
            
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: {specialization_percentages}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
            max_score = max(scores.values())
            print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {max_score}")
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö 8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if scores["devops"] > 0 and scores["devops"] == max_score:
                specialization = "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
            elif scores["mobile"] > 0 and scores["mobile"] == max_score:
                specialization = "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            elif scores["game"] > 0 and scores["game"] == max_score:
                specialization = "Game Development"
            elif scores["ai_ml"] > 0 and scores["ai_ml"] == max_score:
                specialization = "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
            elif scores["code"] > 0 and scores["code"] == max_score:
                specialization = "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
            elif scores["data"] > 0 and scores["data"] == max_score:
                specialization = "Data Science"
            elif scores["design"] > 0 and scores["design"] == max_score:
                specialization = "UX/UI –¥–∏–∑–∞–π–Ω"
            elif scores["security"] > 0 and scores["security"] == max_score:
                specialization = "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                if abs(scores["code"] - scores["data"]) <= 3:
                    specialization = "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
                elif abs(scores["code"] - scores["design"]) <= 3:
                    specialization = "Game Development"
                elif abs(scores["code"] - scores["security"]) <= 3:
                    specialization = "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
                elif abs(scores["design"] - scores["data"]) <= 3:
                    specialization = "UX/UI –¥–∏–∑–∞–π–Ω"
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
                    max_spec = max(specialization_percentages.items(), key=lambda x: x[1])
                    specialization = max_spec[0]
            
            print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
            spec_info = db.get_specialization_from_code(specialization)
            
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {spec_info}")
        
        if spec_info:
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            universities = db.get_universities_by_specialization(spec_info['id'])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ –±–∞–ª–ª–∞–º (–æ—Ç –≤—ã—Å—à–∏—Ö –∫ –Ω–∏–∑—à–∏–º)
            universities_sorted = sorted(universities, key=lambda x: x.get('score_max', 0), reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
            top_universities = universities_sorted[:5]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏ –∫–∞—Ä—å–µ—Ä—ã
            skills = spec_info.get('skills', '‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python, Java, C++)\n‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π\n‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏')
            careers = spec_info.get('careers', '‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ IT')
            
            result_text = f"""
üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%
‚Ä¢ Data Science: {specialization_percentages['Data Science']}%
‚Ä¢ UX/UI –¥–∏–∑–∞–π–Ω: {specialization_percentages['UX/UI –¥–∏–∑–∞–π–Ω']}%
‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {specialization_percentages['–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']}%
‚Ä¢ DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {specialization_percentages['–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']}%
‚Ä¢ Game Development: {specialization_percentages['Game Development']}%
‚Ä¢ AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%

üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_info['name']}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{spec_info['description']}

üèõÔ∏è –¢–æ–ø-5 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤:
"""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ —Å –±–∞–ª–ª–∞–º–∏
            for i, uni in enumerate(top_universities, 1):
                score_range = f"{uni.get('score_min', 0)}-{uni.get('score_max', 0)}"
                result_text += f"\n{i}. {uni['name']}"
                result_text += f"\n   üìç {uni.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')}"
                result_text += f"\n   üéØ –ë–∞–ª–ª—ã –ï–ì–≠: {score_range}"
                result_text += f"\n   üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {spec_info['name']}\n"
            
            result_text += f"""

üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
{careers}

üîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏:
{skills}

üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: 80,000 - 150,000 —Ä—É–±.
‚Ä¢ –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è
‚Ä¢ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞: –û—Ç–ª–∏—á–Ω—ã–µ
            """
        else:
            result_text = f"""
üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%
‚Ä¢ Data Science: {specialization_percentages['Data Science']}%
‚Ä¢ UX/UI –¥–∏–∑–∞–π–Ω: {specialization_percentages['UX/UI –¥–∏–∑–∞–π–Ω']}%
‚Ä¢ –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {specialization_percentages['–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']}%
‚Ä¢ DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: {specialization_percentages['–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']}%
‚Ä¢ Game Development: {specialization_percentages['Game Development']}%
‚Ä¢ AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: {specialization_percentages['AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']}%

üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {specialization}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç'))
        markup.add(types.KeyboardButton('–í—Å–µ –≤—É–∑—ã'))
        markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'))
        markup.add(types.KeyboardButton('–ü–æ–º–æ—â—å'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –≤—É–∑—ã" –∏ –æ—Ç—á—ë—Ç–∞
        if spec_info:
            current_state['specialization_id'] = spec_info['id']
            current_state['specialization_name'] = spec_info['name']
            current_state['show_all_universities'] = True
        else:
            current_state['show_all_universities'] = False
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ)
        if 'saved_scores' not in current_state:
            current_state['saved_scores'] = scores
            current_state['saved_percentages'] = specialization_percentages
            current_state['saved_specialization'] = specialization
            current_state['saved_spec_info'] = spec_info
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        if 'current_question' in current_state:
            del current_state['current_question']
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        bot.send_message(message.chat.id, result_text, reply_markup=markup, disable_web_page_preview=True)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –≤—É–∑—ã"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_results: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

# ===== –ö–û–ù–ï–¶ –§–ê–ô–õ–ê =====

if __name__ == "__main__":
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ IT-–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    print("=" * 50)
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
    print("=" * 50)
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}") 